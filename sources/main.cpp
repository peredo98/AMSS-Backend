#include <iostream>

#include <string>
#include <string.h>
#include <iostream>
#include <chrono>
#include <ctime>
#include <regex>

#include <bsoncxx/builder/stream/document.hpp>
#include <bsoncxx/json.hpp>
#include <mongocxx/client.hpp>
#include <mongocxx/instance.hpp>

#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include "FaceDB.cpp"

using namespace std;

FaceDB *db = new FaceDB();

int main(int, char **)
{
     cout << endl
          << " ** version 23 **" << endl;

     string name;
     string id;
     int result;
     Mat mymat;

     /* DELETE ALL DATABASE */
     // db->deleteAll();

     // Mat img;
     // result = db->getImgById("A01114317", img);
     // imwrite("./../testFolder/out/A01114317.png", img);

     /* CREATE A PERSON WITH BIOMETRIC DATA  */
     // string m = "-0.0616511 0.0475776 0.0362354 -0.00242895 -0.112268 0.0606102 0.00753146 -0.0637529 0.106891 -0.0187525 0.234492 -0.0159751 -0.307106 -0.043978 -0.0115506 0.111364 -0.0745489 -0.158511 -0.101033 0.00115909 -0.0506868 -0.00411913 0.0347568 0.0161157 -0.114755 -0.343202 -0.0764834 -0.0734758 -0.0221774 -0.107824 -0.0256894 0.0826778 -0.178726 -0.0932796 0.0919714 0.059551 -0.110057 -0.0537951 0.236683 0.0418406 -0.149338 0.0509383 0.0202544 0.31261 0.105552 0.00383814 0.0733314 -0.0827081 0.0150385 -0.306268 0.116218 0.178675 0.132616 0.102245 0.0139852 -0.156941 0.0219384 0.172704 -0.197279 0.172844 0.0878312 -0.0951407 -0.0269293 -0.0737721 0.184078 0.114524 -0.106078 -0.156875 0.152411 -0.0966852 -0.0578988 0.0594064 -0.128421 -0.253084 -0.259731 0.0860366 0.365467 0.172306 -0.193488 -0.0112439 -0.118117 0.0102733 -0.0197583 0.0182373 -0.0595545 -0.0467462 -0.0528645 0.0386661 0.222398 -0.00462176 -0.0749823 0.207324 0.02384 -0.0242014 0.0872049 0.0496973 0.0073562 -0.0334233 -0.157541 0.0342626 -0.0506163 -0.199644 0.0226653 0.0700061 -0.228765 0.162332 -0.00795656 -0.054744 0.0033665 0.0153879 -0.119359 0.00656874 0.196424 -0.368868 0.289858 0.238483 0.129638 0.144729 0.0572777 0.0434036 0.0245095 -0.0430119 -0.127455 -0.115466 0.0321838 0.0248377 0.0170342 0.0841654";
     // string n = "-0.0655079 0.0690271 0.0021162 -0.0257782 -0.0986043 0.111701 0.0208896 -0.0399436 0.110203 -0.0340782 0.26934 -0.0160517 -0.295691 -0.0752613 0.031978 0.0983907 -0.117126 -0.136332 -0.120889 0.0175581 -0.0692704 0.0023763 0.0305309 0.0260692 -0.147197 -0.379964 -0.0622384 -0.0865151 0.0217936 -0.130979 -0.0441539 0.098084 -0.169122 -0.077425 0.0604469 0.0480285 -0.096275 -0.0401113 0.234278 0.0751676 -0.19235 0.0423303 0.0325505 0.331564 0.140167 0.00262341 0.0690553 -0.0634018 0.0349632 -0.297434 0.110803 0.177569 0.143938 0.088171 -0.0031783 -0.13914 -0.00284011 0.135178 -0.204379 0.147438 0.0747636 -0.107236 -0.0248385 -0.059577 0.15486 0.107293 -0.089704 -0.180458 0.151387 -0.119339 -0.0765511 0.0796549 -0.125105 -0.259026 -0.282548 0.0901779 0.37832 0.201828 -0.172716 0.0149473 -0.11909 -0.0544199 0.00282964 0.0802033 -0.0430424 -0.0503241 -0.0401632 0.0529515 0.231029 -0.0132195 -0.068395 0.194758 0.0335194 -0.0230613 0.0768645 0.0484102 -0.0222673 -0.0155564 -0.145723 0.0133732 -0.0550851 -0.177206 0.0268946 0.0762096 -0.241841 0.211683 0.0221193 -0.0696319 0.0447158 0.0197885 -0.0731614 -0.0160547 0.177402 -0.366922 0.244778 0.24591 0.141014 0.156699 0.0798074 0.0541609 0.0404421 -0.0162672 -0.146647 -0.118927 0.0306446 0.0156863 0.0237265 0.0585895";
     // Mat mymat = db->stringToMat(n);
     // db->createPerson("ruben", "slazar", "A01338799", 25, "Male", mymat);
     // db->createPerson("said", "slazar", "A01338853", 25, "Male", mymat);

     // /* DELETE A PERSON BASED ON ITS ID */
     // cout << "delete a person" << endl;
     // db->deletePersonById("A01330000"); //NO EXISTE

     /* GET PERSON'S NAME BY STUDENT ID */
     // string name;
     // int result = db->getNameById("A01159981", name); //Natalia
     // cout << "The result is: " << result << " and the name is: " << name << endl;

     /* GET A PERSON'S NAME BASED ON MAT FORMAT*/
     // string matStr = "-0.0616511 0.0475776 0.0362354 -0.00242895 -0.112268 0.0606102 0.00753146 -0.0637529 0.106891 -0.0187525 0.234492 -0.0159751 -0.307106 -0.043978 -0.0115506 0.111364 -0.0745489 -0.158511 -0.101033 0.00115909 -0.0506868 -0.00411913 0.0347568 0.0161157 -0.114755 -0.343202 -0.0764834 -0.0734758 -0.0221774 -0.107824 -0.0256894 0.0826778 -0.178726 -0.0932796 0.0919714 0.059551 -0.110057 -0.0537951 0.236683 0.0418406 -0.149338 0.0509383 0.0202544 0.31261 0.105552 0.00383814 0.0733314 -0.0827081 0.0150385 -0.306268 0.116218 0.178675 0.132616 0.102245 0.0139852 -0.156941 0.0219384 0.172704 -0.197279 0.172844 0.0878312 -0.0951407 -0.0269293 -0.0737721 0.184078 0.114524 -0.106078 -0.156875 0.152411 -0.0966852 -0.0578988 0.0594064 -0.128421 -0.253084 -0.259731 0.0860366 0.365467 0.172306 -0.193488 -0.0112439 -0.118117 0.0102733 -0.0197583 0.0182373 -0.0595545 -0.0467462 -0.0528645 0.0386661 0.222398 -0.00462176 -0.0749823 0.207324 0.02384 -0.0242014 0.0872049 0.0496973 0.0073562 -0.0334233 -0.157541 0.0342626 -0.0506163 -0.199644 0.0226653 0.0700061 -0.228765 0.162332 -0.00795656 -0.054744 0.0033665 0.0153879 -0.119359 0.00656874 0.196424 -0.368868 0.289858 0.238483 0.129638 0.144729 0.0572777 0.0434036 0.0245095 -0.0430119 -0.127455 -0.115466 0.0321838 0.0248377 0.0170342 0.0841654";
     // Mat matSearch = db->stringToMat(matStr);

     // result = db->getNameByBiometricData(matSearch, name); //Ruben
     // cout << "The result is: " << result << " and the name is: " << name << endl;

     // result = db->getIdByBioData(matSearch, id);
     // cout << "The result is: " << result << " and the ID is: " << id << endl;

     /* GET THE BIOMETRIC DATA BASED ON ITS ID */
     // Mat mymat;
     // result = db->getMatById("A01159981", mymat);
     // cout << "The result is: " << result << " and the Mat is: " << endl
     //      << mymat << endl;

     /* SEARCH IN DB -- A PERSON PASSES  */
     // auto start = std::chrono::system_clock::now();
     // string vectStr = "-0.135567 0.172607 0.0167846 -0.128199 -0.175226 0.0239578 -0.00404694 -0.105726 0.139048 0.00635076 0.268201 0.0507827 -0.266023 -0.137845 -0.0600635 0.10416 -0.194329 -0.0962113 -0.112535 -0.116377 0.0195352 0.0204516 0.127756 0.0228127 -0.152978 -0.220577 -0.0599669 -0.088396 0.153352 -0.143567 0.133291 0.0237014 -0.184032 -0.0880266 0.0166746 0.0676837 -0.130859 -0.0588863 0.237713 -0.0199961 -0.149462 0.00694858 0.0407344 0.337265 0.175813 -0.0224553 0.0339418 -0.045082 0.088157 -0.246749 0.0965079 0.159478 0.128198 0.0280186 0.110859 -0.121525 0.0495348 0.237531 -0.198398 0.0986055 0.0999715 -0.0825857 -0.0786477 -0.0973889 0.15066 0.0976394 -0.125867 -0.162494 0.133153 -0.0908295 -0.0494904 0.177561 -0.0949329 -0.14075 -0.229741 0.0537809 0.435248 0.152106 -0.144691 -0.0298026 -0.0537097 0.011945 0.017797 0.0213371 -0.161587 -0.0501671 -0.0858943 0.0175816 0.0849039 -0.0325069 -0.0798298 0.230664 0.0755551 -0.0311923 0.0670722 0.00768766 -0.0864641 0.0133474 -0.0851649 -0.00301264 0.058836 -0.234818 0.0341502 0.0164673 -0.127769 0.169688 0.0438087 0.0270159 0.00937726 0.0107631 -0.114745 -0.0136599 0.212453 -0.335894 0.294693 0.215136 -0.00187059 0.124768 0.148747 0.106526 -0.00106857 0.0137919 0.00537002 -0.109269 0.0230693 -0.1087 0.0985793 0.00933705";
     // Mat matSearch = db->stringToMat(vectStr);
     // vector<Mat> topMatches;
     // vector<string> topNames;
     // vector<string> topMatchesId;
     // int numKnn = 4;
     // result = db->searchPerson(matSearch, numKnn, topMatches, topNames, topMatchesId);
     // for (int i = 0; i < numKnn; i++)
     // {
     //      cout << "Person #" << (i + 1) << endl;
     //      cout << "Mat: " << endl
     //           << topMatches[i] << endl;
     //      cout << "ID: " << topMatchesId[i] << endl;
     //      cout << "Name: " << topNames[i] << endl
     //           << endl;
     // }

     // auto end = std::chrono::system_clock::now();
     // std::chrono::duration<double> elapsed_seconds = end - start;
     // std::time_t end_time = std::chrono::system_clock::to_time_t(end);
     // std::cout << "finished computation at " << std::ctime(&end_time)
     //           << "elapsed time: " << elapsed_seconds.count() << "s\n";

     // db->printDB();
}